{"version":3,"sources":["AppWrapper/Content/Login/Login.module.css","Validation/loginFormSchema.js","AppWrapper/Content/Login/Login.jsx"],"names":["module","exports","loginFormSchema","Yup","shape","login","min","max","required","password","LoginForm","props","initialValues","rememberMe","captcha","onSubmit","values","setSubmitting","validateOnBlur","validationSchema","handleChange","handleBlur","errors","touched","className","loginStyle","form","input","onChange","value","name","placeholder","error","onBlur","type","checkbox","checkboxLabel","captchaUrl","img","alt","src","capthaInput","button","IncorrectEmailOrPassword","errorMessages","connect","state","auth","isAuth","to","wrapper","header"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,OAAS,sBAAsB,YAAc,2BAA2B,IAAM,mBAAmB,OAAS,sBAAsB,MAAQ,qBAAqB,cAAgB,6BAA6B,SAAW,wBAAwB,MAAQ,uB,0ECUzRC,EATSC,MAAaC,MAAM,CACzCC,MAAOF,MACJG,IAAI,EAAG,gMACPC,IAAI,GAAI,uMACRC,SAAS,sGACZC,SAAUN,MACPG,IAAI,EAAG,sMACPE,SAAS,wG,0CCDRE,EAAY,SAACC,GACf,OACI,cAAC,IAAD,CAAQC,cAAe,CAAEP,MAAO,GAAII,SAAU,GAAII,YAAY,EAAOC,QAAS,IAC1EC,SAAU,SAACC,EAAD,IACNC,EADqC,EAApBA,gBACH,GACdN,EAAMN,MAAMW,EAAOX,MAAOW,EAAOP,SAAUO,EAAOH,WAAYG,EAAOF,UAEzEI,gBAAc,EACdC,iBAAkBjB,EANtB,SAQK,gBAAGkB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYL,EAA7B,EAA6BA,OAAQM,EAArC,EAAqCA,OAAQC,EAA7C,EAA6CA,QAA7C,OACG,eAAC,IAAD,CAAMC,UAAWC,IAAWC,KAA5B,UACI,gCACI,cAAC,IAAD,CAAOF,UAAWC,IAAWE,MAAOC,SAAUR,EAAcS,MAAOb,EAAOX,MAAOyB,KAAK,QAAQC,YAAa,mCAC1GR,EAAQlB,OAASiB,EAAOjB,OAAS,mBAAGmB,UAAWC,IAAWO,MAAzB,SAAiCV,EAAOjB,WAE9E,gCACI,cAAC,IAAD,CAAOmB,UAAWC,IAAWE,MAAOC,SAAUR,EAAca,OAAQZ,EAAYQ,MAAOb,EAAOP,SAAUyB,KAAK,WAAWJ,KAAK,WAAWC,YAAa,yCACpJR,EAAQd,UAAYa,EAAOb,UAAY,mBAAGe,UAAWC,IAAWO,MAAzB,SAAiCV,EAAOb,cAEpF,gCACI,cAAC,IAAD,CAAOe,UAAWC,IAAWU,SAAUP,SAAUR,EAAca,OAAQZ,EAAYa,KAAK,WAAWJ,KAAK,eACxG,qBAAKN,UAAWC,IAAWW,cAA3B,gGAEJ,8BACA,8BAAMzB,EAAM0B,YACJ,gCACI,qBAAKb,UAAWC,IAAWa,IAA3B,SAAgC,qBAAMC,IAAI,GAAGC,IAAK7B,EAAM0B,eACxD,cAAC,IAAD,CAAOb,UAAWC,IAAWgB,YAAaV,YAAY,qGAAqBF,MAAOb,EAAOF,QAASc,SAAUR,EAAca,OAAQZ,EAAYS,KAAK,mBAI/J,gCACI,wBAAQN,UAAWC,IAAWiB,OAAQR,KAAM,SAA5C,4CACCvB,EAAMgC,yBAA2B,sBAAKnB,UAAWC,IAAWO,MAA3B,cAAoCrB,EAAMiC,iBAAuB,eAkC5GC,uBAPS,SAACC,GAAD,MAAY,CAChCT,WAAYS,EAAMC,KAAKV,WACvBW,OAAQF,EAAMC,KAAKC,OACnBL,yBAA0BG,EAAMC,KAAKJ,yBACrCC,cAAeE,EAAMC,KAAKH,iBAGU,CAAEvC,WAA3BwC,EAzBD,SAAClC,GACX,OAAIA,EAAMqC,OACC,cAAC,IAAD,CAAUC,GAAI,aAGrB,sBAAKzB,UAAWC,IAAWyB,QAA3B,UACI,oBAAI1B,UAAWC,IAAW0B,OAA1B,gFACA,gCACI,qBAAK3B,UAAWC,IAAW0B,OAA3B,sKACA,qBAAK3B,UAAWC,IAAW0B,OAA3B,6CACA,qBAAK3B,UAAWC,IAAW0B,OAA3B,wCAEJ,cAAC,EAAD,CAAWd,WAAY1B,EAAM0B,WAAYhC,MAAOM,EAAMN,MACrDsC,yBAA0BhC,EAAMgC,yBAA0BC,cAAejC,EAAMiC","file":"static/js/4.afaed43a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__21gCq\",\"header\":\"Login_header__2zjPC\",\"capthaInput\":\"Login_capthaInput__6WXoS\",\"img\":\"Login_img__1Hxwz\",\"button\":\"Login_button__2e2kO\",\"input\":\"Login_input__u2PQP\",\"checkboxLabel\":\"Login_checkboxLabel__LJflJ\",\"checkbox\":\"Login_checkbox__35izE\",\"error\":\"Login_error__1lWfp\"};","import * as Yup from \"yup\";\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n  login: Yup.string()\r\n    .min(2, \"Логин не может быть короче 2 символов!\")\r\n    .max(30, \"Логин не может быть длиньше 30 символов!\")\r\n    .required(\"Обязательное поле!\"),\r\n  password: Yup.string()\r\n    .min(5, \"Пароль не может быть короче 5 символов!\")\r\n    .required(\"Обязательное поле!\")\r\n});\r\nexport default loginFormSchema;","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik';\r\nimport loginFormSchema from '../../../Validation/loginFormSchema';\r\nimport loginStyle from './Login.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { login } from './../../../Redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <Formik initialValues={{ login: '', password: '', rememberMe: false, captcha: ''}}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                setSubmitting(false);\r\n                props.login(values.login, values.password, values.rememberMe, values.captcha)\r\n            }}\r\n            validateOnBlur\r\n            validationSchema={loginFormSchema}\r\n        >\r\n            {({ handleChange, handleBlur, values, errors, touched }) => (\r\n                <Form className={loginStyle.form} >\r\n                    <div>\r\n                        <Field className={loginStyle.input} onChange={handleChange} value={values.login} name='login' placeholder={'Логин'} />\r\n                        {touched.login && errors.login && <p className={loginStyle.error}>{errors.login}</p>}\r\n                    </div>\r\n                    <div>\r\n                        <Field className={loginStyle.input} onChange={handleChange} onBlur={handleBlur} value={values.password} type='password' name='password' placeholder={'Пароль'} />\r\n                        {touched.password && errors.password && <p className={loginStyle.error}>{errors.password}</p>}\r\n                    </div>\r\n                    <div>\r\n                        <Field className={loginStyle.checkbox} onChange={handleChange} onBlur={handleBlur} type='checkbox' name='rememberMe' />\r\n                        <div className={loginStyle.checkboxLabel}>запомнить меня</div>\r\n                    </div>\r\n                    <div>\r\n                    <div>{props.captchaUrl && \r\n                            <div>\r\n                                <div className={loginStyle.img}><img  alt='' src={props.captchaUrl}></img></div>\r\n                                <Field className={loginStyle.capthaInput} placeholder='символы с картинки' value={values.captcha} onChange={handleChange} onBlur={handleBlur} name='captcha'/>\r\n                            </div>\r\n                        }</div>\r\n                    </div>\r\n                    <div>\r\n                        <button className={loginStyle.button} type={'submit'} >Войти</button>\r\n                        {props.IncorrectEmailOrPassword ? <div className={loginStyle.error}> {props.errorMessages}</div> : null}\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nconst Login = (props) => {\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return (\r\n        <div className={loginStyle.wrapper}>\r\n            <h1 className={loginStyle.header}>Авторизация</h1>\r\n            <div>\r\n                <div className={loginStyle.header}>Используйте для авторизации</div>\r\n                <div className={loginStyle.header}>Login: vladimirbyshev@gmail.com</div>\r\n                <div className={loginStyle.header}>Paswword: QERKhDxzrg8X </div>\r\n            </div>\r\n            <LoginForm captchaUrl={props.captchaUrl} login={props.login}\r\n             IncorrectEmailOrPassword={props.IncorrectEmailOrPassword} errorMessages={props.errorMessages} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    IncorrectEmailOrPassword: state.auth.IncorrectEmailOrPassword,\r\n    errorMessages: state.auth.errorMessages\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login) "],"sourceRoot":""}